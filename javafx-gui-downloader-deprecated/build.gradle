group 'uk.ac.ebi.ena'
version 'v1.2.2'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'javafx-gradle-plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "uk.ac.ebi.ena.downloader.gui.Main"

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

run {
}

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.compile
}


jar {
    baseName 'ena-file-downloader'

    dependsOn configurations.compile
    from {
        (configurations.compile).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/**"
        exclude "LICENSE"
        exclude "controlsfx_*.properties"
    }
    manifest {
        attributes 'Implementation-Title': 'ENA File Downloader',
                'Implementation-Version': version,
                'Main-Class': 'uk.ac.ebi.ena.downloader.gui.Main',
                'Permissions': 'all-permissions',
                'Application-Name': 'ENA File Downloader'
    }
}

dependencies {
    compile group: 'commons-net', name: 'commons-net', version: '3.5'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    compile 'commons-io:commons-io:2.4'
    compile name:'ftp4j', version: '1.7.2'
    compile 'org.controlsfx:controlsfx:8.40.13'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

import org.gradle.internal.os.OperatingSystem

switch ( OperatingSystem.current() ) {
    case OperatingSystem.WINDOWS:
        project.ext.pkgCmd = ["cmd", "/c", "package"]
        break
    case OperatingSystem.LINUX:
        project.ext.pkgCmd = ["./package.sh"]
        break
    case OperatingSystem.MAC_OS:
        project.ext.pkgCmd = ["./package.sh"]
        break
}

task packageDist(type: Exec, dependsOn: 'jar') {
    commandLine project.ext.pkgCmd
}

jfx {
    // requirement for jfxJar-task
    mainClass = mainClassName
    jfxAppOutputDir = "build/packages/app"
    jfxMainAppJarName = jar.baseName + version + ".jar"

    // requirement for jfxNative-task
    vendor = 'EMBL-EBI'
    nativeOutputDir = "build/packages/native"
}

task copyUnsignedFile(type: Copy, dependsOn: [clean, jar]) {
    from configurations.compile
    from("build/libs")
    into("build/unsigned")
    include('ena-file-downloader-*.jar')
}

task signAll(dependsOn: [copyUnsignedFile]) << {
    new File('build/signed').mkdirs()
    def libFiles = files { file('build/unsigned').listFiles() }
    libFiles.each {
        ant.signjar(
                storetype: 'pkcs12',
                destDir: 'build/signed',
                alias: '1', //'european molecular biology laboratory\'s godaddy.com, inc. id',
                jar: it,
                keystore: 'certificates/ENA-2016.P12',
                storepass: 'pass1234',
                verbose: 'true',
                tsaurl: 'http://tsa.starfieldtech.com/', //timestamp url for godaddy
                preservelastmodified: 'true')
    }
}

task copyReadme(type: Copy) {
    from("/")
    into("build/signed")
    include('README.md')
}

signAll.finalizedBy(copyReadme);
